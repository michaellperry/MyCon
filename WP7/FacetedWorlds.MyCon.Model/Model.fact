namespace FacetedWorlds.MyCon.Model;

fact Identity {
key:
    string anonymousId;

query:
    DisableToastNotification* isToastNotificationDisabled {
        DisableToastNotification d : d.identity = this
            where not d.isReenabled
    }
}

fact DisableToastNotification {
key:
    unique;
    Identity identity;

query:
    bool isReenabled {
        exists EnableToastNotification e : e.disable = this
    }
}

fact EnableToastNotification {
key:
    DisableToastNotification* disable;
}

fact Conference {
key:
	string id;

mutable:
    string name;
	Survey sessionSurvey;
	Survey conferenceSurvey;

query:
	Day* days {
		Day d : d.conference = this
	}

	Track* tracks {
		Track t : t.conference = this
	}

	Session* sessions {
		Session s : s.conference = this
	}

	Speaker* speakers {
		Speaker s : s.conference = this
	}
}

fact Attendee {
key:
    Identity identity;
    Conference conference;

query:
	Schedule* currentSchedules {
		Schedule s : s.slot.attendee = this
			where s.isCurrent
	}
}

fact Day {
key:
	Conference conference;
	date conferenceDate;

query:
	Time* times {
		Time t : t.day = this
	}
}

fact Time {
key:
    Day day;
    time start;

query:
	SessionPlace* availableSessions {
		SessionPlace sp : sp.place.placeTime = this
			where sp.isCurrent
	}
}

fact Slot {
key:
    Attendee attendee;
    Time slotTime;

query:
	Schedule* currentSchedules {
		Schedule s : s.slot = this
			where s.isCurrent
	}
}

fact Room {
key:
    Conference conference;
    string roomNumber;
}

fact Track {
key:
    Conference conference;
    string name;

query:
	SessionPlace* currentSessionPlaces {
		SessionPlace sp : sp.session.track = this
			where sp.isCurrent
	}
}

fact Speaker {
key:
    Conference conference;
    string name;

mutable:
	string imageUrl;
	string contact;
	DocumentSegment* bio;

query:
	SessionPlace* availableSessions {
		SessionPlace sp : sp.session.speaker = this
			where sp.isCurrent
	}
}

fact Place {
key:
    Time placeTime;
    Room room;
}

fact Level {
key:
	string name;
}

fact Session {
key:
    string id;
    Conference conference;
    Speaker speaker;
    Track? track;

mutable:
    string name;
	DocumentSegment* description;
	Level level;

query:
	SessionPlace* currentSessionPlaces {
		SessionPlace sp : sp.session = this
			where sp.isCurrent
	}
}

fact SessionPlace {
key:
    Session session;
    Place place;
    SessionPlace* prior;

query:
	bool isCurrent {
		not exists SessionPlace next : next.prior = this
	}
}

fact Schedule {
key:
	unique;
    Slot slot;
    SessionPlace sessionPlace;

query:
	bool isCurrent {
		not exists ScheduleRemove r : r.schedule = this
	}

	SessionEvaluation* completedEvaluations {
		SessionEvaluation e : e.schedule = this
			where e.isCompleted
	}
}

fact ScheduleRemove {
key:
	Schedule schedule;
}

fact RatingQuestion {
key:
	string text;
}

fact EssayQuestion {
key:
	string text;
}

fact Survey {
key:
	RatingQuestion *ratingQuestions;
	EssayQuestion *essayQuestions;
}

fact SessionEvaluation {
key:
    Schedule schedule;
	Survey survey;

query:
	bool isCompleted {
		exists SessionEvaluationCompleted c : c.sessionEvaluation = this
	}
}

fact SessionEvaluationCompleted {
key:
	SessionEvaluation sessionEvaluation;
}

fact SessionEvaluationRating {
key:
	SessionEvaluation evaluation;
	RatingQuestion question;

mutable:
	int answer;
}

fact SessionEvaluationEssay {
key:
	SessionEvaluation evaluation;
	EssayQuestion question;

mutable:
	string answer;
}

fact DocumentSegment {
key:
	string text;
}
