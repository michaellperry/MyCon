namespace FacetedWorlds.MyCon.Model;

fact Individual {
key:
    string anonymousId;

query:
    Profile* profiles {
        IndividualProfile ip : ip.individual = this
        Profile p : ip.profile = p
    }

    Attendee* activeAttendees {
        IndividualProfile ip : ip.individual = this
        Attendee a : a.profile = ip.profile
            where a.isActive
    }
}

fact Profile {
key:
    string profileId;
}

fact IndividualProfile {
key:
    publish Individual individual;
    Profile profile;
}

fact Attendee {
key:
    publish Conference conference;
    publish Profile profile;

query:
    AttendeeInactive* inactives {
        AttendeeInactive i : i.attendee = this
            where i.isCurrent
    }

    bool isActive {
        not exists AttendeeInactive i : i.attendee = this
            where i.isCurrent
    }
}

fact AttendeeInactive {
key:
    unique;
    Attendee attendee;

query:
    bool isCurrent {
        not exists AttendeeActive a : a.attendeeInactive = this
    }
}

fact AttendeeActive {
key:
    AttendeeInactive attendeeInactive;
}

fact Catalog {
key:
    string domain;

query:
    ConferenceHeader* conferenceHeaders {
        ConferenceHeader h : h.catalog = this
            where h.isCurrent
    }
}

fact ConferenceHeader {
key:
    unique;
    publish Catalog catalog;
    Conference conference;

mutable:
    string name;
    string imageUrl;
    date startDate;
    date endDate;
    string address;
    string city;
    string homePageUrl;
    DocumentSegment* description;

query:
    bool isCurrent {
        not exists ConferenceHeaderDelete d : d.conferenceHeader = this
    }
}

fact ConferenceHeaderDelete {
key:
    ConferenceHeader conferenceHeader;
}

fact Conference {
key:
    unique;

query:
    ConferenceHeader *conferenceHeaders {
        ConferenceHeader h : h.conference = this
    }

    Time* times {
        Time t : t.conference = this
    }
}

fact Speaker {
key:
    unique;
    publish Conference conference;

mutable:
    string name;
	string imageUrl;
	string contact;
	DocumentSegment* bio;
}

fact Session {
key:
    unique;
    Speaker speaker;

mutable:
    string title;
	DocumentSegment* description;
}

fact Track {
key:
    unique;
    publish Conference conference;

mutable:
    string name;
}

fact SessionTrack {
key:
    Session session;
    Track track;
    SessionTrack* prior;

query:
    bool isCurrent {
        not exists SessionTrack next : next.prior = this
    }
}

fact Time {
key:
    unique;
    publish Conference conference;

mutable:
    time startTime;
}

fact Room {
key:
    unique;
    publish Conference conference;

mutable:
    string roomNumber;
}

fact Slot {
key:
    Time slotTime;
    Room room;
}

fact SessionSlot {
key:
    Session session;
    Slot slot;
    SessionSlot* prior;

query:
    bool isCurrent {
        not exists SessionSlot next : next.prior = this
    }
}

fact DocumentSegment {
key:
	string text;
}
